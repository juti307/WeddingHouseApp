// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingHouseApp.Data;

namespace WeddingHouseApp.Migrations
{
    [DbContext(typeof(WeddingContext))]
    partial class WeddingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Adres_korespondencyjny", b =>
                {
                    b.Property<int>("Adres_korespondencyjnyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kod_pocztowy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kraj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nr_domu_mieszkania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Adres_korespondencyjnyId");

                    b.ToTable("Adres_korespondencyjny");
                });

            modelBuilder.Entity("Models.Dokument", b =>
                {
                    b.Property<int>("DokumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Osoba_personaliaForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("Rodzaj_dokumentu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seria_numer_dokumentu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DokumentId");

                    b.HasIndex("Osoba_personaliaForeignKey")
                        .IsUnique();

                    b.ToTable("Dokument");
                });

            modelBuilder.Entity("Models.Klient", b =>
                {
                    b.Property<int>("KlientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_pary_mlodej")
                        .HasColumnType("int");

                    b.Property<int>("Osoba_personaliaForeignKey")
                        .HasColumnType("int");

                    b.Property<int?>("Para_młodaPara_mlodaId")
                        .HasColumnType("int");

                    b.HasKey("KlientId");

                    b.HasIndex("Osoba_personaliaForeignKey")
                        .IsUnique();

                    b.HasIndex("Para_młodaPara_mlodaId");

                    b.ToTable("Klient");
                });

            modelBuilder.Entity("Models.Kontakt", b =>
                {
                    b.Property<int>("KontaktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Adres_korespondencyjnyId")
                        .HasColumnType("int");

                    b.Property<int>("Id_osoby")
                        .HasColumnType("int");

                    b.Property<string>("Nr_telefonu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Osoba_personaliaId")
                        .HasColumnType("int");

                    b.HasKey("KontaktId");

                    b.HasIndex("Adres_korespondencyjnyId");

                    b.HasIndex("Osoba_personaliaId");

                    b.ToTable("Kontakt");
                });

            modelBuilder.Entity("Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alkohole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Koszt_za_osobe")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stol_wiejski")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Models.Osoba_personalia", b =>
                {
                    b.Property<int>("Osoba_personaliaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Drugie_imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Osoba_personaliaId");

                    b.ToTable("Osoba_personalia");
                });

            modelBuilder.Entity("Models.Para_mloda", b =>
                {
                    b.Property<int>("Para_mlodaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Akceptacja_oferty")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Data_przedstawienia_oferty")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sposob_przedstawienia_oferty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Para_mlodaId");

                    b.ToTable("Para_mloda");
                });

            modelBuilder.Entity("Models.Pracownik", b =>
                {
                    b.Property<int>("PracownikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data_zatrudnienia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Osoba_personaliaForeignKey")
                        .HasColumnType("int");

                    b.Property<double>("Pensja")
                        .HasColumnType("float");

                    b.Property<double>("Prowizje")
                        .HasColumnType("float");

                    b.Property<string>("Stanowisko")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PracownikId");

                    b.HasIndex("Osoba_personaliaForeignKey")
                        .IsUnique();

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("Models.Rozliczenia_szczegoly", b =>
                {
                    b.Property<int>("Rozliczenia_szczegolyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_rozliczenia")
                        .HasColumnType("datetime2");

                    b.Property<double>("Kwota_wplaty")
                        .HasColumnType("float");

                    b.Property<string>("Nr_paragonu_faktury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rodzaj_platnosci")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UmowaId")
                        .HasColumnType("int");

                    b.Property<int>("Wesele_szczegolyForeignKey")
                        .HasColumnType("int");

                    b.HasKey("Rozliczenia_szczegolyId");

                    b.HasIndex("UmowaId");

                    b.HasIndex("Wesele_szczegolyForeignKey")
                        .IsUnique();

                    b.ToTable("Rozliczenia_szczegoly");
                });

            modelBuilder.Entity("Models.Umowa", b =>
                {
                    b.Property<int>("UmowaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_podpisania")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_pracownika")
                        .HasColumnType("int");

                    b.Property<int?>("PracownikId")
                        .HasColumnType("int");

                    b.HasKey("UmowaId");

                    b.HasIndex("PracownikId");

                    b.ToTable("Umowa");
                });

            modelBuilder.Entity("Models.Wesele_szczegoly", b =>
                {
                    b.Property<int>("Wesele_szczegolyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_wesela")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Godzina_rozpoczecia")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Godzina_zakonczenia")
                        .HasColumnType("time");

                    b.Property<int>("Id_menu")
                        .HasColumnType("int");

                    b.Property<int>("Ile_osob")
                        .HasColumnType("int");

                    b.Property<double>("Koszt_calkowity")
                        .HasColumnType("float");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("Wesele_szczegolyId");

                    b.HasIndex("MenuId");

                    b.ToTable("Wesele_szczegoly");
                });

            modelBuilder.Entity("Models.Dokument", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Dokument")
                        .HasForeignKey("Models.Dokument", "Osoba_personaliaForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Klient", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Klient")
                        .HasForeignKey("Models.Klient", "Osoba_personaliaForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Para_mloda", "Para_młoda")
                        .WithMany("Klient")
                        .HasForeignKey("Para_młodaPara_mlodaId");
                });

            modelBuilder.Entity("Models.Kontakt", b =>
                {
                    b.HasOne("Models.Adres_korespondencyjny", "Adres_korespondencyjny")
                        .WithMany("Kontakt")
                        .HasForeignKey("Adres_korespondencyjnyId");

                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithMany("Kontakt")
                        .HasForeignKey("Osoba_personaliaId");
                });

            modelBuilder.Entity("Models.Pracownik", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Pracownik")
                        .HasForeignKey("Models.Pracownik", "Osoba_personaliaForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Rozliczenia_szczegoly", b =>
                {
                    b.HasOne("Models.Umowa", "Umowa")
                        .WithMany("Rozliczenia_szczegoly")
                        .HasForeignKey("UmowaId");

                    b.HasOne("Models.Wesele_szczegoly", "Wesele_szczegoly")
                        .WithOne("Rozliczenia_szczegoly")
                        .HasForeignKey("Models.Rozliczenia_szczegoly", "Wesele_szczegolyForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Umowa", b =>
                {
                    b.HasOne("Models.Pracownik", "Pracownik")
                        .WithMany("Umowa")
                        .HasForeignKey("PracownikId");
                });

            modelBuilder.Entity("Models.Wesele_szczegoly", b =>
                {
                    b.HasOne("Models.Menu", "Menu")
                        .WithMany("Wesele_szczegoly")
                        .HasForeignKey("MenuId");
                });
#pragma warning restore 612, 618
        }
    }
}
