// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeddingHouseApp.Data;

namespace WeddingHouseApp.Migrations
{
    [DbContext(typeof(WeddingContext))]
    [Migration("20211213235916_m1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Adres_korespondencyjny", b =>
                {
                    b.Property<int>("Adres_korespondencyjnyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kod_pocztowy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kraj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nr_domu_mieszkania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Adres_korespondencyjnyID");

                    b.ToTable("Adres_korespondencyjny");
                });

            modelBuilder.Entity("Models.Dokument", b =>
                {
                    b.Property<int>("DokumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Osoba_personaliaID")
                        .HasColumnType("int");

                    b.Property<string>("Rodzaj_dokumentu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seria_numer_dokumentu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DokumentID");

                    b.HasIndex("Osoba_personaliaID")
                        .IsUnique();

                    b.ToTable("Dokument");
                });

            modelBuilder.Entity("Models.Klient", b =>
                {
                    b.Property<int>("KlientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Osoba_personaliaID")
                        .HasColumnType("int");

                    b.Property<int>("Para_mlodaID")
                        .HasColumnType("int");

                    b.HasKey("KlientID");

                    b.HasIndex("Osoba_personaliaID")
                        .IsUnique();

                    b.HasIndex("Para_mlodaID");

                    b.ToTable("Klient");
                });

            modelBuilder.Entity("Models.Kontakt", b =>
                {
                    b.Property<int>("KontaktID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres_email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Adres_korespondencyjnyID")
                        .HasColumnType("int");

                    b.Property<string>("Nr_telefonu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Osoba_personaliaID")
                        .HasColumnType("int");

                    b.HasKey("KontaktID");

                    b.HasIndex("Adres_korespondencyjnyID");

                    b.HasIndex("Osoba_personaliaID");

                    b.ToTable("Kontakt");
                });

            modelBuilder.Entity("Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alkohole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Koszt_za_osobe")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stol_wiejski")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Models.Osoba_personalia", b =>
                {
                    b.Property<int>("Osoba_personaliaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DokumentID")
                        .HasColumnType("int");

                    b.Property<string>("Drugie_imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KontaktID")
                        .HasColumnType("int");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PracownikID")
                        .HasColumnType("int");

                    b.HasKey("Osoba_personaliaID");

                    b.ToTable("Osoba_personalia");
                });

            modelBuilder.Entity("Models.Para_mloda", b =>
                {
                    b.Property<int>("Para_mlodaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Akceptacja_oferty")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Data_przedstawienia_oferty")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sposob_przedstawienia_oferty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Para_mlodaID");

                    b.ToTable("Para_mloda");
                });

            modelBuilder.Entity("Models.Pracownik", b =>
                {
                    b.Property<int>("PracownikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data_zatrudnienia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Osoba_personaliaID")
                        .HasColumnType("int");

                    b.Property<double>("Pensja")
                        .HasColumnType("float");

                    b.Property<double>("Prowizje")
                        .HasColumnType("float");

                    b.Property<string>("Stanowisko")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PracownikID");

                    b.HasIndex("Osoba_personaliaID")
                        .IsUnique();

                    b.ToTable("Pracownik");
                });

            modelBuilder.Entity("Models.Rozliczenia_szczegoly", b =>
                {
                    b.Property<int>("Rozliczenia_szczegolyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_rozliczenia")
                        .HasColumnType("datetime2");

                    b.Property<double>("Kwota_wplaty")
                        .HasColumnType("float");

                    b.Property<string>("Nr_paragonu_faktury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rodzaj_platnosci")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UmowaID")
                        .HasColumnType("int");

                    b.Property<int>("Wesele_szczegolyID")
                        .HasColumnType("int");

                    b.HasKey("Rozliczenia_szczegolyID");

                    b.HasIndex("UmowaID");

                    b.HasIndex("Wesele_szczegolyID")
                        .IsUnique();

                    b.ToTable("Rozliczenia_szczegoly");
                });

            modelBuilder.Entity("Models.Umowa", b =>
                {
                    b.Property<int>("UmowaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_podpisania")
                        .HasColumnType("datetime2");

                    b.Property<int>("PracownikID")
                        .HasColumnType("int");

                    b.HasKey("UmowaID");

                    b.HasIndex("PracownikID");

                    b.ToTable("Umowa");
                });

            modelBuilder.Entity("Models.Wesele_szczegoly", b =>
                {
                    b.Property<int>("Wesele_szczegolyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data_wesela")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Godzina_rozpoczecia")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Godzina_zakonczenia")
                        .HasColumnType("time");

                    b.Property<int>("Ile_osob")
                        .HasColumnType("int");

                    b.Property<double>("Koszt_calkowity")
                        .HasColumnType("float");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("Rozliczenia_szczegolyID")
                        .HasColumnType("int");

                    b.HasKey("Wesele_szczegolyID");

                    b.HasIndex("MenuID");

                    b.ToTable("Wesele_szczegoly");
                });

            modelBuilder.Entity("Models.Dokument", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Dokument")
                        .HasForeignKey("Models.Dokument", "Osoba_personaliaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Klient", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Klient")
                        .HasForeignKey("Models.Klient", "Osoba_personaliaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Para_mloda", "Para_młoda")
                        .WithMany("Klient")
                        .HasForeignKey("Para_mlodaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Kontakt", b =>
                {
                    b.HasOne("Models.Adres_korespondencyjny", "Adres_korespondencyjny")
                        .WithMany("Kontakt")
                        .HasForeignKey("Adres_korespondencyjnyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithMany("Kontakt")
                        .HasForeignKey("Osoba_personaliaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Pracownik", b =>
                {
                    b.HasOne("Models.Osoba_personalia", "Osoba_personalia")
                        .WithOne("Pracownik")
                        .HasForeignKey("Models.Pracownik", "Osoba_personaliaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Rozliczenia_szczegoly", b =>
                {
                    b.HasOne("Models.Umowa", "Umowa")
                        .WithMany("Rozliczenia_szczegoly")
                        .HasForeignKey("UmowaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Wesele_szczegoly", "Wesele_szczegoly")
                        .WithOne("Rozliczenia_szczegoly")
                        .HasForeignKey("Models.Rozliczenia_szczegoly", "Wesele_szczegolyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Umowa", b =>
                {
                    b.HasOne("Models.Pracownik", "Pracownik")
                        .WithMany("Umowa")
                        .HasForeignKey("PracownikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Wesele_szczegoly", b =>
                {
                    b.HasOne("Models.Menu", "Menu")
                        .WithMany("Wesele_szczegoly")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
